Idée de base :
- données vectorielles chargées avec strategie BBOX à grande échelle (cliquables et éditables). (données vect transparentes au dessus de rendu mapserver ou non?)
- données raster mapserver à petite échelle (juste visualisables, pas éditables)
- données vectorielles rechargées toutes les 5 minutes (permet le travail collaboratif)

-> dans les deux modes, le selecteur de carte (tag à visualiser) est actif
 
Au clic sur un polygone vecteur, popup geoext avec contenu : tableau présentant attributs en mode R/W et lien de chargement dans JOSM utilisant RemoteControl. Pas de bouton pour sauvegarder : sauvegarde auto / mentionnée par indicateur AJAX.


Différentes versions de l'application :

V1 :
 - les tuiles vectorielles sont créées une fois pour toutes, et sélectionnées par intersection avec world boundaries à la main
 - étendue = France pour commencer (afin de limiter la taille du fichier SQL)

V2 : 
 - les utilisateurs peuvent demander la creation d'une grille qui leur est propre, avec des attributs fixés au début
 - ajout de couches WMS à la volée (wms browser ?)
 - si inactivité depuis X minutes, popup alert, bloque les requetes AJAX.
 - controle de transparence geoext sur overlays
 
V3 : 
 - les utilisateurs de l'appli peuvent ajouter des tags à la volée sur une carte ?
 - login utilisateurs via oauth ?

TODO avant V1 :
 + ajout bouton "refresh now"
 + ajout des couches WMS (en dur) connues et libres d'accès dans le cadre de OSM (geolittoral, bmo, jura, sitn, sitg, lausanne ...)
 + WSGI à configurer en urgence !!! (car mapfile et autres en dépend)
 + loadingPanel
 - migration vers qsm = QualityStreetMap
 + mapfile
 + build JS
 + au survol des tiles vectoriels, affichage des attributs dans un Ext.grid.PropertyGrid docké, et liseré jaune sur le bord de la tuile vectorielle
 - i18n
 - passer en vrai "JS module pattern" 
 - au clic sur la tuile, figer la selection à cette tuile, afficher dans le dock le lien vers edition JOSM, offrir la possibilité de (dé)réserver la tuile ? 
 - doc d'installation en anglais
 - sql sur toute la France
 - edition vectorielle (Note: utiliser un featureStore pour que la modification d'un attribut d'une feature entraine une modification de son etat)
 + commutation entre modes de rendu quand on est en raster (petite échelle)
 - deploiement sur osm1.crans.org ou autre ?
 + ajout base layers : osmarender, cyclemap ...
 - splitter en 2 l'arbre des couches : baselayers / overlays
 
 
 Bugs : 
 - permalien ne fonctionne pas
 + en mode buildé, la fleche de la popup n'apparait pas

 
 Pour les clés, s'inspirer de http://wiki.openstreetmap.org/wiki/Romans-sur-Isere qui contient une classification de complétude :
 Signification des symboles
 - Les noms de rues sont indiqués. Cela signifie que la carte peut être utilisée pour trouver une adresse - Clé : l
 - Les routes pour le trafic automobile sont présentes. Les rues à sens unique et les rues piétonnes sont présentes. Cela signifie que la carte peut être utilisée pour une navigation en voiture - Clé : c
 - Toutes les pistes cyclables, les routes empruntables par des vélos en forêt ou à travers champs sont présentes - Clé : b
 - Tous les chemins pour piétons sont présents - Clé : fo
 - Wege für Rollstuhl. - Schlüssel: d
 - Tous les transports publics sont présents (cela inclue le nom des arrêts de bus et des gares) - Clé : tr
 - Toutes les institutions publiques sont présentes (églises, installations sportives, écoles, hôpitaux, mairies...) - Clé: p
 - Toutes les stations services sont présentes - Clé: fu
 - Tous les restaurants et hôtels sont présents - Clé : r
 - Toutes les attractions touristiques sont présentes - Clé : t
 - Toutes les ressources naturelles sont cartographiées (points d'eau, lacs, bois, forêts) - Clé : n
 - Tous les numéros de rues sont présents - Clé : h
 
 Dépendances :
sudo apt-get install libapache2-mod-fcgid libapache2-mod-python libapache2-mod-wsgi

sudo a2enmod expires headers

Installation :

svn co
python bootstrap.py --version 1.4.3 --distribute
copier buildout_sample.cfg en buildout_myconfig.cfg
buildout/bin/buildout -c buildout_myconfig.cfg
source buildout/bin/activate
paster serve --reload myproject_dev.ini ou config apache ...

SQL:

télécharger les shapefiles depuis
http://www.ngdc.noaa.gov/mgg/shorelines/gshhs.html

unzip => dossier GSHHS_shp avec dossiers c = ? f = full h = high i = intermediate l = low

On utilise GSHHS_f_L1.shp du dossier f

shp2pgsql -s 4326 -g geometry -I GSHHS_f_L1.shp world_boundaries > world_boundaries.sql

creation de la base :

sudo su postgres
createdb -E UTF-8 osmqa
createlang plpgsql osmqa

psql -d osmqa -f /usr/share/postgresql-8.3-postgis/lwpostgis.sql
psql -d osmqa -f /usr/share/postgresql-8.3-postgis/spatial_ref_sys.sql

OR:

psql -d osmqa -f /usr/share/postgresql/8.4/contrib/postgis-1.5/postgis.sql
psql -d osmqa -f /usr/share/postgresql/8.4/contrib/postgis-1.5/spatial_ref_sys.sql


import en base ...
psql -d osmqa -f world_boundaries.sql

filtrage sur polygon -85/85 deg :
polygon((-180 85, 180 85, 180 -85, -180 -85, -180 85))

conversion epsg:900913 en base